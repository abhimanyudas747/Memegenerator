[{"D:\\WebDev\\meme-generator\\src\\index.js":"1","D:\\WebDev\\meme-generator\\src\\reportWebVitals.js":"2","D:\\WebDev\\meme-generator\\src\\App.js":"3","D:\\WebDev\\meme-generator\\src\\Components\\memes.component.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":277,"mtime":1608732267673,"results":"8","hashOfConfig":"6"},{"size":3974,"mtime":1608730417548,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1r2ezcm",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"D:\\WebDev\\meme-generator\\src\\index.js",[],["21","22"],"D:\\WebDev\\meme-generator\\src\\reportWebVitals.js",[],"D:\\WebDev\\meme-generator\\src\\App.js",["23"],"import './App.css';\nimport {MemeMaker} from './Components/memes.component'\nimport doge from './doge.jpg'\n\nconst App = () => {\n  document.title = \"Meme Generator\"\n  \n  return (\n\n    <div className=\"app\">\n    \n    <MemeMaker />\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","D:\\WebDev\\meme-generator\\src\\Components\\memes.component.jsx",["24","25","26","27","28","29"],"import {useState, useEffect} from 'react'\r\nimport {Col, Container, Row} from 'react-bootstrap'\r\nimport './memes.component.css'\r\nimport doge from '../doge.jpg'\r\n\r\nexport const MemeMaker = () => {\r\n    const [memes, setMemes] = useState([]);\r\n    const [memeUrl, setMemeUrl] = useState('');\r\n    const [captions, setCaptions] = useState([]);\r\n    const [memeIdx, setMemeIdx] = useState(0);\r\n    //const [boxarr, setBoxarr] = useState([]);\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(response => response.json()).then(data => {setMemes(data.data.memes);\r\n                                                                                                    setMemeUrl(data.data.memes[0].url);\r\n                                                                                                    setCaptions(Array(data.data.memes[0].box_count).fill(''))\r\n                                                                                                    \r\n                                                                                                    })\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const randomize = (e) => {\r\n        var newIdx = Math.floor(Math.random() * memes.length);\r\n        while(newIdx == memeIdx)\r\n        {\r\n        newIdx = Math.floor(Math.random() * memes.length);\r\n        }\r\n        console.log(newIdx)\r\n        \r\n        setMemeIdx(newIdx);\r\n        setCaptions(Array(memes[newIdx].box_count).fill(''));\r\n        setMemeUrl(memes[newIdx].url)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let foo = captions.length > 0;\r\n        // console.log(foo)\r\n        // captions.forEach((c, idx) => {\r\n        //     console.log(c)\r\n        //     if(c.length === 0){\r\n        //     foo = false\r\n        // }})\r\n        \r\n        \r\n        if(foo){\r\n            \r\n            generateMeme()\r\n        }\r\n    }, [captions])\r\n\r\n\r\n    const updateCaptions = async(e) => {\r\n        const newCaptions = [...captions];\r\n        newCaptions[e.target.id] = e.target.value;\r\n        setCaptions(newCaptions)\r\n            \r\n        \r\n        \r\n        \r\n    }\r\n\r\n\r\n    const generateMeme = (e) => {\r\n\r\n        const formData = new FormData();\r\n        formData.append('template_id', memes[memeIdx].id)\r\n        formData.append('username', process.env.REACT_APP_IMGFLIP_USERID)\r\n        formData.append('password', process.env.REACT_APP_IMGFLIP_PASSWORD)\r\n        captions.forEach((cap, idx) => {if(cap===''){\r\n                                            formData.append(`boxes[${idx}][text]`, ' ')\r\n                                                }\r\n                                            else{\r\n                                                formData.append(`boxes[${idx}][text]`, cap)}})\r\n\r\n        fetch('https://api.imgflip.com/caption_image', {\r\n            method: \"POST\",\r\n            body: formData\r\n        })\r\n        .then((resp) => resp.json()).then(data => setMemeUrl(data.data.url))\r\n\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"outer-div\">\r\n        <Row>\r\n            <Col sm={12}>\r\n            <div className=\"upper-div\">\r\n                <button className=\"button\" onClick={randomize}>Random Template</button><br></br>\r\n            \r\n\r\n                {captions.map((e, i) => (<><input value={captions[i]} type=\"text\" placeholder={\"Text\"+(i+1)} id={i} onChange={updateCaptions} /><br></br></>))}\r\n            </div>\r\n\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className=\"memeholdercol\">\r\n        \r\n                \r\n                    {memeUrl.length ? <img src={memeUrl} className=\"memeholder\" /> : <></>}\r\n                \r\n             \r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} style={{background: \"none\", textAlign: \"center\"}}>\r\n                <a className=\"download-button\" href={memeUrl} target=\"_blank\">Download This Meme!</a><br></br>\r\n            </Col>\r\n        </Row>\r\n\r\n        </div>\r\n        \r\n\r\n\r\n\r\n    )\r\n}",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":12},{"ruleId":"34","severity":1,"message":"38","line":2,"column":14,"nodeType":"36","messageId":"37","endLine":2,"endColumn":23},{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":12},{"ruleId":"39","severity":1,"message":"40","line":25,"column":22,"nodeType":"41","messageId":"42","endLine":25,"endColumn":24},{"ruleId":"43","severity":1,"message":"44","line":50,"column":8,"nodeType":"45","endLine":50,"endColumn":18,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":109,"column":39,"nodeType":"49","endLine":109,"endColumn":83},{"ruleId":"50","severity":1,"message":"51","line":116,"column":63,"nodeType":"52","endLine":116,"endColumn":78},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'doge' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateMeme'. Either include it or remove the dependency array.","ArrayExpression",["55"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [captions, generateMeme]",{"range":"58","text":"59"},[1845,1855],"[captions, generateMeme]"]